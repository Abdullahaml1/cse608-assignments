@startuml
skinparam maxMessageSize 30
autonumber

' ###### initilaization of the model ########
== Game Initialization ==

":Student"  ->  ":GameView" ++: startGame()
":GameView" -> ":GameController"++: startGame()


":GameController" -> ":StudentInfo"++: getCourseCode()
":StudentInfo" --> ":GameController"--: course_code


":GameController" -> ":DataElement"++: getObject(ObjectType='course', course_code)
":DataElement" -> ":Database"++: getDataEelment(name='course', course_code)
":Database" --> ":DataElement"--: course_object
":DataElement" --> ":GameController"--: course_object

'######## Stage Playing ##############
loop proceeding Stages
== Stage playing ==

":GameController" -> ":Course"++: getStageObject(stage_id)
":Course" -> ":Database"++: getDataElementObject(ObjectType='stage', [course_code,stage_id])
":Database" --> ":Course"--: stage_object

' ##### creating new object (**) means create new #######
":Course" --> ":Stage" **: createStageObject(stage_id)

":Course" --> ":GameController"--: stage_object

":GameController" --> ":GameView"--: render(stage_object)

":GameView" --> ":Student"--: game begins


' ##### playing a stage #######


loop Proceeding Stage
'       ####### Course materials ######
":Student" -> ":GameView" ++: maneuverGame()
":GameView" -> ":GameController" ++: getStageMaterialObject()
":GameController" -> ":Stage" ++:getStageMaterialsObject()
":Stage" -> ":StageMaterials" **: createStageMaterials() 
":Stage" --> ":GameController"--: stage_material_object
":GameController" --> ":GameView"--: course_material_boject
":GameView" --> ":Student"--: game maneuvering rendered


'       ###### puzzle #######
":Student" -> ":GameView" ++: start_puzzle()
":GameView" -> ":GameController" ++: getPuzzleObject()
":GameController" -> ":Stage"++: getPuzzleObject()
":Stage" -> ":Puzzle" ** :createPuzzleObject()
":Stage" --> ":GameController"--: puzzle_object
":GameController" --> ":GameView"--: puzzle_object
":GameView" --> ":Student"--: puzzle rendered

'             ###### solving puzzle ########
loop 3 trials solving puzzle
":Student" -> ":GameView" ++: solvePuzzle(answer)
":GameView" -> ":GameController" ++: solvePuzzle(answer)
":GameController" -> ":Puzzle" ++: isCorrect(answer)
alt solution is correct (exit loop)
    ":Puzzle" --> ":GameController" --: yes
    ":GameController" -> ":StudentInfo":UpdateScore(puzzle_id, score)
    ":StudentInfo" -> ":Database" :store(altered_data)
else try agin 
    ":Puzzle" --> ":GameController" --: no
    ":GameController" --> ":GameView" --: render(puzzle_object)
    ":GameView" --> ":Student"--: puzzle rendered
    
end

'       ###### Failed 3 times in puzzle #####
group failed 3 times
   ":GameController" -> ":StudentInfo":MultipyScoreByDecayingFactor(puzzle_id)
   ":StudentInfo" -> ":Database" :store(altered_data)
   ":GameController" --> ":GameView" :restartStage()
   ":GameView" --> ":Student": game restarted
end
end
end


' ###### Finish All course materials 
group complete the stage
    ":GameController" -> ":StudentInfo":nextStage()
    ":StudentInfo" -> ":Database" :store(altered_data)
    ' ######### deleteing objects ######
    ":GameController" -> ":StageMaterials" !!: delete()
    ":GameController" -> ":Puzzle" !!: delete()
    ":GameController" -> ":Stage" !!: delete()

end
end


' ###### pause the game #######
== Pause the game ==
":Student" -> ":GameView" : pause()
":GameView" -> ":GameController"++: pause()
":GameController" -> ":StudentInfo": store(altered_data)
":GameController" --> ":GameView" -- : render(pause)
":GameView" --> ":Student": game paused
@enduml
